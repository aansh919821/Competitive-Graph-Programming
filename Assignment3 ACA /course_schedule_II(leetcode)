class Solution {
public:
    vector<int> findOrder(int n, vector<vector<int>>& p) {
        vector<vector<int>> adj(n);
        for(int i = 0; i<p.size(); i++){
            adj[p[i][1]].push_back(p[i][0]);
        }
        vector<int>indegree(n,0);
	    vector<int>ans;
	    queue<int>q;
        for(int i = 0; i<n; i++){
	        for(auto it: adj[i]){
	            indegree[it]++;
	        }
	    }
	    for(int i = 0; i<n; i++){
	        if (indegree[i] == 0){
	            q.push(i);
	        }
	    }
	    while(!q.empty()){
	        int x = q.front();
	        q.pop();
	        ans.push_back(x);
	        for(auto it : adj[x]){
	            indegree[it]--;
	            if (indegree[it] == 0){
	                q.push(it);
	            }
	        }
	    }
        vector<int>res;
        if (ans.size() != n){
	        return res;
	    }
	    vector<int>map(n,-1);
	    for(int i = 0; i<n; i++){
	        map[ans[i]] = i;
	    }
	    for(int i = 0; i<n; i++){
	        for(auto it: adj[i]){
	            if (map[i]>map[it]){
	                return res;
	            }
	        }
	    }
	    return ans;
    }
};


int Solution::snakeLadder(vector<vector<int> > &A, vector<vector<int> > &B) {
    vector<int> moves(101);
    for (int i = 0; i <= 100; i++) {
        moves[i] = i;
    }
    for (auto it: A) {
        moves[it[0]] = it[1];
    }
    for (auto it : B) {
        moves[it[0]] = it[1];
    }
    vector<int> vis(101, 0);
    vis[1] = 1;
    queue<pair<int, int>> q; 
    q.push({1, 0});
    while (!q.empty()) {
        int node = q.front().first;
        int rolls = q.front().second;
        q.pop();
        for (int dice = 1; dice <= 6; dice++) {
            int next = node + dice;
            if (next == 100){
                return rolls+1;
            }
            else if (next < 100) {
                next = moves[next];
                if (next == 100) {
                        return rolls + 1;
                    }
                if (!vis[next]) {
                    vis[next] = 1;
                    q.push({next, rolls + 1});
                }
            }
        }
    }
    return -1; 
}

class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int rows = heights.size();
        int columns = heights[0].size();
        priority_queue<pair<int, pair<int,int>>, vector<pair<int, pair<int,int>>>, greater<pair<int, pair<int,int>>>>pq;
        pq.push({0, {0, 0}});
        vector<vector<int>>dist(rows, vector<int>(columns, 1e9));
        dist[0][0] = 0;
        vector<int>dr = {-1,0,1,0};
        vector<int>dc = {0,1,0,-1};
        while(!pq.empty()){
            int dis = pq.top().first;
            int r = pq.top().second.first;
            int c = pq.top().second.second;
            pq.pop();
            if (r  == rows-1 && c == columns-1){
                        return dis;
                    }
            for(int i = 0; i<4; i++){
                int newr = r + dr[i];
                int newc = c + dc[i];
                
                if (newr>=0 && newc>=0 && newr<rows && newc<columns){
                    int newEffort = max(abs(heights[newr][newc] - heights[r][c]), dis);
                    if (newEffort < dist[newr][newc]){
                        dist[newr][newc] = newEffort;
                        pq.push({dist[newr][newc],{ newr, newc}});
                    }
                }
            }
        }
        return 0;
    }
};

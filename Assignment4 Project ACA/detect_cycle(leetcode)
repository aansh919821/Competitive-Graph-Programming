class Solution {
private:
    int dr[4] = {-1,0,1,0};
    int dc[4] = {0,1,0,-1};
public:
    bool dfs(int row, int col, vector<vector<int>>&vis, vector<vector<char>>& grid, int par_row, int par_col ){
        vis[row][col] = 1;
        int m = grid.size();
        int n = grid[0].size();
        for(int i = 0; i<4; i++){
            int nr = row + dr[i];
            int nc = col + dc[i];
            if(nr>=0 && nr<m && nc>=0 && nc<n && grid[nr][nc] == grid[row][col]){
                if(!vis[nr][nc] ){
                    if(dfs(nr, nc, vis, grid, row, col)){
                        return true;
                    }
                }
                else if(nr!= par_row && nc!= par_col){
                        return true;
                }
            } 
        }
        return false;
    }
    bool containsCycle(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>>vis(m, vector<int>(n, 0));
        for(int i = 0; i<m; i++){
            for(int j= 0; j<n; j++){
                if(!vis[i][j]){
                    if(dfs(i, j, vis, grid, -1, -1)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
};
    
    


